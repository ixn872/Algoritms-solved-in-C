//*
// * Definition for a binary tree node.
// * struct TreeNode {
// *     int val;
// *     TreeNode *left;
// *     TreeNode *right;
// *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
// *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
// *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
// * };
// 

//Given the root of a Binary Search Tree(BST), return the minimum difference between the values of any two different nodes in the tree.

#include<iostream> 
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}
};



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 //
 //Given the head of a linked list, return the list after sorting it in ascending order.
 //
 //Follow up : Can you sort the linked list in O(n logn) time and O(1) memory(i.e.constant space) ?

struct ListNode {
    int val;
    ListNode* next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode* next) : val(x), next(next) {}

};

void printLinkedList(ListNode* head);
//
//Algorithm of Insertion Sort :
//
//Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list.
//At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there.
//It repeats until no input elements remain.

class Solution {
public:

    ListNode* insertionSortList(ListNode* head) {
        //Base Case

        //first merge sort the list...
        if (head == NULL) {
            return head;
        }

        ListNode* curr = head;
        ListNode* sorted=NULL;
        while (curr != NULL) {
            // cout << curr->val << endl;
            ListNode* next = curr->next; //for next iteration


           // ListNode* temp = sorted; //to iterate sorted one and put curr in correct position


            if (sorted == NULL || sorted->val >= curr->val) {
                curr->next = sorted;
                sorted = curr;
                printLinkedList(sorted);
                // curr = next;

            }

            else {
                ListNode* temp = sorted; //to iterate sorted one and put curr in correct position
                ListNode* prev;

                while (temp->next != NULL && temp->val < curr->val) {
                    prev = temp;
                    temp = temp->next;
                }
            
                /*insert curr before temp*/
                // other ->curr -> temp ->other
                cout << curr->val << temp->val << endl;
                printLinkedList(sorted);
                if (curr->val > temp->val) {
                    curr->next = temp->next;
                    temp->next = curr;
                }
                else {
                    //124   , curr :3 temp:4 , prev = 2
                    prev->next = curr; //->next;
                    curr->next = temp;
                }
                printLinkedList(sorted);
                //curr->next=temp;
                //temp = curr->next;
                //temp->next = curr;


                printLinkedList(sorted);


            }
        
            curr = next;

        
        }          

        
       
        head = sorted;
        
        return sorted;


    }

};

void printLinkedList(ListNode* head) {
        ListNode* temp = head;
        cout << "----" << endl;
        while (temp) {
            
            cout << temp->val << "" << endl;
            temp = temp->next;
        }
        cout << "----" << endl;

    
};


int main() {
  //[-1,5,3,4,0]
        ListNode* head = new ListNode(-1);
        head->next = new ListNode(5);
        head->next->next = new ListNode(3);
        head->next->next->next = new ListNode(4);
        head->next->next->next->next = new ListNode(0);
      //  head->next->next->next->next->next = new ListNode(1);

        //printLinkedList(head);
        Solution myObj;
        printLinkedList(myObj.insertionSortList(head));
        //printLinkedList(myObj.sortList(&head));
        return 0;
    
}
